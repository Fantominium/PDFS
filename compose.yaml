# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # web:
  #   build:
  #     context: ./frontend
  #   container_name: PrequinFE
  #   networks:
  #     - app-network
  #   ports:
  #     - 3001:3001
  api:
    build:
      context: .
    container_name: PrequinApi
    env_file: 
      - path: ./.env
    # depends_on:
      # - db
    environment:
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
    networks:
      - app-network
    ports:
      - 8181:8181

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
    # depends_on:
    #   db:
    #     condition: service_healthy
  # db:
  #   image: amazon/dynamodb-local:latest
  #   container_name: dynamodb
  #   restart: always
  #   volumes:
  #     - ./database:/home/dynamodblocal/data
  #   expose:
  #     - 8000
  #   ports:
  #     - 8000:8000
  #   networks:
  #     - app-network
  #   command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"
  #   healthcheck:
  #     test: [ "CMD", "dynamodb_isready" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
networks:
  app-network:
    driver: bridge
volumes:
  database:
# secrets:
#   db-password:
#     file: db/password.txt

